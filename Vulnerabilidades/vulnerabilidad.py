class Vulnerabilidad:
    """
    Representa una vulnerabilidad en un sistema con un nombre, severidad y descripción.

    Atributos:
    -----------
    nombre : str
        Nombre de la vulnerabilidad.
    severidad : str
        Nivel de severidad de la vulnerabilidad (Baja, Media, Alta, Crítica).
    descripcion : str
        Descripción de la vulnerabilidad.

    Métodos:
    --------
    __init__(nombre: str, severidad: str, descripcion: str):
        Inicializa una nueva instancia de Vulnerabilidad y valida el nivel de severidad.

    mostrar_info():
        Muestra la información de la vulnerabilidad: nombre, severidad y descripción.

    recomendar_acciones():
        Imprime las acciones recomendadas basadas en el nivel de severidad de la vulnerabilidad.
    """

    def __init__(self, nombre: str, severidad: str, descripcion: str):
        """
        Inicializa la clase Vulnerabilidad.

        Parámetros:
        -----------
        nombre : str
            Nombre de la vulnerabilidad.
        severidad : str
            Nivel de severidad de la vulnerabilidad (Baja, Media, Alta, Crítica).
            Si la severidad no es válida, solicita al usuario un valor correcto.
        descripcion : str
            Descripción de la vulnerabilidad.
        """
        self.nombre = nombre
        while True:
            if severidad not in ["Baja", "Media", "Alta", "Crítica"]:
                severidad = input("Ingrese argumento válido: Baja, Media, Alta, Crítica\n")
            if severidad in ["Baja", "Media", "Alta", "Crítica"]:
                self.severidad = severidad
                break
        self.descripcion = descripcion

    def mostrar_info(self):
        """
        Muestra la información básica de la vulnerabilidad, incluyendo el nombre, severidad y descripción.
        """
        print(f"Nombre: {self.nombre}\n"
              f"Severidad: {self.severidad}\n"
              f"Descripción: {self.descripcion}")

    def recomendar_acciones(self):
        """
        Imprime las acciones recomendadas según la severidad de la vulnerabilidad.

        Recomendaciones por severidad:
        - Baja: Mantener bajo observación y revisar en el próximo ciclo de actualización.
        - Media: Monitorizar la actividad del sistema y planificar la aplicación de parches.
        - Alta: Realizar una auditoría de seguridad y aplicar medidas correctivas lo antes posible.
        - Crítica: Aplicar parches de seguridad inmediatamente y revisar sistemas afectados.
        """
        recomendacion: str = ""
        match self.severidad:
            case "Baja":
                recomendacion += "Mantener bajo observación y revisar en el próximo ciclo de actualización."
            case "Media":
                recomendacion += " Monitorizar la actividad del sistema y planificar la aplicación de parches."
            case "Alta":
                recomendacion += "Realizar una auditoría de seguridad y aplicar medidas correctivas lo antes posible."
            case "Crítica":
                recomendacion += "Aplicar parches de seguridad inmediatamente y revisar sistemas afectados."
        print(f"Acción recomendada: {recomendacion}")


# Ejemplo de uso
objeto1: Vulnerabilidad = Vulnerabilidad("SQL Injection", "Alta", "Permite la ejecución de consultas SQL no autorizadas.")
objeto2: Vulnerabilidad = Vulnerabilidad("XSS", "Media", "Permite la ejecución de scripts en el navegador del usuario.")
objeto3: Vulnerabilidad = Vulnerabilidad("Desbordamiento de Buffer", "Crítica", "Permite la ejecución arbitraria de código.")

registro_vulnerabilidades: list[Vulnerabilidad] = [objeto1, objeto2, objeto3]
for obj in registro_vulnerabilidades:
    obj.mostrar_info()
    obj.recomendar_acciones()
