from dotenv import load_dotenv, set_key
from results_parser import ResultsParser
import os
from file_downloader import FileDownloader
from google_search import GoogleSearch
import argparse
import sys


def main(query, configure_env, start_page, pages, language, output_json, output_html, download):
    # Comprobamos si existe file .env
    env_exists = os.path.exists('.env')
    if not env_exists or configure_env:
        env_config()
        print("Archivo .env configurado con valores proporcionados")
        sys.exit(0)  # Detenemos el programa para volver a ejecutarlo con nuevos valores

    # Cargamos las variables en el entorno
    load_dotenv()

    # Leemos la clave API
    GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

    # Leemos id del motor de busqueda
    SEARCH_ENGINE_ID = os.getenv("SEARCH_ENGINE_ID")

    if not query:
        print("Indica la consulta con comando -q.\n"
              "Utiliza comando -h para mostrar ayuda")
        sys.exit(1)  # Salimos del programa a espera de una query válida

    google = GoogleSearch(GOOGLE_API_KEY, SEARCH_ENGINE_ID)
    results = google.search(query,
                            start_page=start_page,
                            pages=pages,
                            language=language, )

    results_parser = ResultsParser(results)

    # Mostrar en consola
    results_parser.mostrar_pantalla()

    if output_html:
        results_parser.export_html(output_html)
    if output_json:
        results_parser.exportar_json(output_json)
    if download:
        # Separar las extensiones de los archivos en una lista
        files_types = download.split(",")
        # Extraemos unicamente las URLs de los resultados obtenidos
        urls = [resultado['link'] for resultado in results]
        file_downloader = FileDownloader("Descargas")
        file_downloader.filtrar_descargar_archivo(urls, files_types)



def env_config():
    """
    Configurar el archivo .env con valores proporcionados por usuario
    :return:
    """
    api_key = input("Inroduce tu API KEY de google")
    engine_id = input("Inroduce tu engine ID de google")
    set_key(".env", "GOOGLE_API_KEY", api_key)
    set_key(".env", "SEARCH_ENGINE_ID", engine_id)


if __name__ == '__main__':
    # Configuración de argumentos de programa
    parser = argparse.ArgumentParser(description="Herramienta para hacking buscadores")
    parser.add_argument("-q", "--query", type=str,
                        help="Especifica el dork que desea buscar.\n"
                             "Ejemplo: -q 'filetype:sql \"MySQL dump\" (pass|password|passwd|pwd)'")
    parser.add_argument("-c", "--configure", action="store_true",
                        help="Inicia el proceso de configuración del archivo .env\n"
                             "Utiliza esta opción sin otros argumentos para configurar claves")
    parser.add_argument("--start-page", type=int, default=1,
                        help="Define la página de inicio del buscador")
    parser.add_argument("--pages", type=int, default=1,
                        help="Número de páginas de resultado de búsqueda")
    parser.add_argument("--language", type=str, default="lang_es",
                        help="Código de idioma para resultados de búsqueda")
    parser.add_argument("--json", type=str,
                        help="Exporta los resultados en formato JSON en fichero especificado.")
    parser.add_argument("--html", type=str,
                        help="Exporta los resulatados en formato HTML en fichero especificado.")
    parser.add_argument("--download", type=str, default="all",
                        help="Especifica las extensiones de los archivos que desees descargar.\n"
                             "Ejemplo: --download 'pdf, doc, sql '")
    args = parser.parse_args()

    main(query=args.query,
         configure_env=args.configure,
         pages=args.pages, start_page=args.start_page,
         language=args.language,
         output_json=args.json,
         output_html=args.html,
         download=args.download)
