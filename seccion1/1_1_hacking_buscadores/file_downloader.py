import os
import requests


class FileDownloader:
    """
    Clase para gestionar la descarga de archivos desde URLs a un directorio local.

    Attributes:
        directorio (str): Ruta del directorio donde se almacenarán los archivos descargados.
    """

    def __init__(self, directorio_destino):
        """
        Inicializa una instancia de FileDownloader, asegurándose de que el directorio
        de destino exista o sea creado.

        Args:
            directorio_destino (str): Ruta del directorio donde se guardarán los archivos.
        """
        self.directorio = directorio_destino
        self.crear_directorio()

    def crear_directorio(self):
        """
        Crea el directorio de destino si no existe.
        """
        if not os.path.exists(self.directorio):
            os.makedirs(self.directorio)

    def descargar_archivo(self, url):
        """
        Descarga un archivo desde la URL proporcionada y lo guarda en el directorio de destino.

        Args:
            url (str): URL del archivo a descargar.

        Raises:
            Exception: Si ocurre algún error durante la descarga o el guardado del archivo.
        """
        try:
            response = requests.get(url)
            nombre_archivo = url.split('/')[-1]
            ruta_completa = os.path.join(self.directorio, nombre_archivo)

            # Guardamos el archivo en disco
            with open(ruta_completa, 'wb') as archivo:
                archivo.write(response.content)
            print(f'Archivo {nombre_archivo} descargado exitosamente en {ruta_completa}')

        except Exception as e:
            print(f'Error al descargar archivo {nombre_archivo}, error: {e}')

    def filtrar_descargar_archivo(self, urls, tipos_archivo=["all"]):
        """
        Filtra y descarga archivos desde una lista de URLs según sus extensiones.

        Args:
            urls (list): Lista de URLs de archivos a descargar.
            tipos_archivo (list): Lista de extensiones de archivo permitidas. Si se
                                  especifica ["all"], se descargarán todos los archivos.

        """
        if tipos_archivo == ["all"]:
            for url in urls:
                self.descargar_archivo(url)
        else:
            for url in urls:
                if any(url.endswith(f".{tipo}") for tipo in tipos_archivo):
                    self.descargar_archivo(url)


