import argparse
import os
import re

class SmartSearch:
    """
    SmartSearch realiza búsquedas de texto en archivos de un directorio utilizando expresiones regulares.

    Métodos:
    --------
    __init__(dir_path: str) -> None
        Inicializa la clase con la ruta del directorio y carga el contenido de los archivos.

    read_file() -> dict
        Lee todos los archivos de texto en el directorio especificado y los almacena en un diccionario.

    regex_search(regex: str) -> dict
        Busca coincidencias en los archivos utilizando una expresión regular y devuelve un diccionario con los archivos y los resultados.

    Atributos:
    ----------
    dir_path : str
        Ruta del directorio donde se encuentran los archivos.

    files : dict
        Diccionario que contiene los nombres de los archivos como clave y su contenido como valor.

    """

    def __init__(self, dir_path):
        self.dir_path = dir_path
        self.files = self.read_file()

    def read_file(self):
        """
        Lee los archivos de texto en el directorio especificado.

        Devuelve:
        --------
        dict:
            Un diccionario con los nombres de los archivos como claves y el contenido de los archivos como valores.
        """
        files = {}
        for archivo in os.listdir(self.dir_path):
            file_path = os.path.join(self.dir_path, archivo)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    files[archivo] = f.read()
            except Exception as e:
                print(f"Error al leer el archivo {file_path}: {e}")
        return files

    def regex_search(self, regex):
        """
        Realiza una búsqueda en el contenido de los archivos utilizando una expresión regular.

        Parámetros:
        -----------
        regex : str
            La expresión regular que se utilizará para buscar en los archivos.

        Devuelve:
        --------
        dict:
            Un diccionario con los nombres de los archivos como claves y una lista de coincidencias como valores.
        """
        coincidencias = {}
        for file, text in self.files.items():
            respuesta = ""
            while respuesta not in ('y', 'n', 'yes', 'no'):
                respuesta = input(f"El fichero {file} tiene una longitud de {len(text)} caracteres. Procesar? ('yes','no','y','n'):\n").lower()
                if respuesta in ('n', 'no'):
                    continue
                matches = re.findall(regex, text, re.IGNORECASE)
                if not matches:
                    coincidencias[file] = matches
        return coincidencias


if __name__ == '__main__':
    """
    Punto de entrada del programa. Lee los argumentos de la línea de comandos y ejecuta una búsqueda 
    utilizando la expresión regular especificada en los archivos de un directorio.
    """
    parser = argparse.ArgumentParser(description='Realiza búsquedas en los ficheros de un directorio')
    parser.add_argument('dir_path', type=str, help='Directorio que se quiere realizar')
    parser.add_argument('-r', '--regex', type=str, help='Expresión regular para realizar búsqueda')

    args = parser.parse_args()
    if args.regex:
        searcher = SmartSearch(args.dir_path)
        resutaldos_busqueda = searcher.regex_search(args.regex)
        print()
        for file, result in resutaldos_busqueda.items():
            print(file)
            for r in result:
                print(f"\t{r}")
