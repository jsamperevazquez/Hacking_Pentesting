import requests


class GoogleSearch:
    def __init__(self, api_key: str, engine_id: str) -> None:
        """
        Crea una nueva instancia de GoogleSearch.

        Esta clase permite realizar búsquedas automatizadas a través de la API de Google Custom Search.

        :param api_key: Clave de la API proporcionada por Google. Necesaria para autenticar las solicitudes.
        :param engine_id: ID del motor de búsqueda personalizado (Custom Search Engine) configurado en Google.
        """
        self.api_key = api_key
        self.engine_id = engine_id

    def search(self, query: str, start_page: int = 1, pages: int = 1, language: str = 'lang_es') -> list:
        """
        Realiza una búsqueda en Google usando la API de Google Custom Search y devuelve resultados personalizados.

        Este método realiza múltiples solicitudes paginadas a la API de Google, con un límite de 10 resultados por página.
        Si hay algún error en la respuesta de la API, el proceso de búsqueda se interrumpe y se notifica con un mensaje.

        :param query: El término de búsqueda o palabra clave.
        :param start_page: El número de página desde la que iniciar la búsqueda (predeterminado es 1).
        :param pages: El número total de páginas a recuperar (predeterminado es 1).
        :param language: El idioma en el que realizar la búsqueda, usando el código de idioma (ej. 'lang_es' para español).

        :return: Una lista de resultados personalizados, donde cada resultado es un diccionario que contiene:
                 - 'title': Título del resultado.
                 - 'description': Descripción breve del contenido (snippet).
                 - 'link': Enlace al resultado.
                 - 'author': Autor (si está disponible).
        """
        final_results: list = []
        results_per_page = 10  # Número de resultados por página devueltos por Google Custom Search.

        for page in range(pages):
            # Calcula el índice de inicio para cada página en la búsqueda paginada.
            start_index = (start_page - 1) * results_per_page + 1 + (page * results_per_page)

            # Construye la URL de la API con los parámetros.
            url: str = (
                f"https://www.googleapis.com/customsearch/v1?key={self.api_key}&cx={self.engine_id}&q={query}"
                f"&start={start_index}&lr={language}")

            # Realiza la solicitud a la API.
            response = requests.get(url)

            # Verifica si la respuesta es exitosa.
            if response.status_code == 200:
                data = response.json()
                results = data.get("items", [])

                # Filtra los resultados obtenidos usando el método custom_results().
                c_results = self.custom_results(results)
                final_results.extend(c_results)
            else:
                print(f"Error al consultar página {page}, error HTTP {response.status_code}")
                break

        return final_results

    def custom_results(self, results: list) -> list[dict[str, str]]:
        """
        Personaliza los resultados de búsqueda obtenidos de la API de Google.

        Este método filtra y estructura los resultados en un formato específico, seleccionando campos como el título,
        la descripción (snippet), el enlace, y el autor si está disponible.

        :param results: Lista de resultados obtenida de la API de Google, en formato JSON.
        :return: Una lista de diccionarios que contiene:
                 - 'title': Título del resultado.
                 - 'description': Descripción breve del contenido (snippet).
                 - 'link': Enlace al resultado.
                 - 'author': Autor del contenido (si está disponible).
        """
        custom_results = []

        # Itera sobre los resultados obtenidos y los estructura en un formato legible.
        for result in results:
            cus_result = {
                "title": result.get("title"),
                "description": result.get("snippet"),
                "link": result.get("link"),
                "author": result.get("author", "Desconocido")  # Si el autor no está presente, se asigna 'Desconocido'.
            }
            custom_results.append(cus_result)

        return custom_results
