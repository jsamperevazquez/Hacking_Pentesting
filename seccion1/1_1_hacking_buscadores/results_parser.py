import json
from rich.console import Console
from rich.table import Table


class ResultsParser:
    """
    Clase para procesar resultados de búsqueda y exportarlos en diferentes formatos.

    Atributos:
    ----------
    results : list
        Lista de diccionarios que contienen los resultados de búsqueda con claves: "title", "description", y "link".

    Métodos:
    --------
    export_html(archivo_salida):
        Exporta los resultados a un archivo HTML utilizando una plantilla.

    exportar_json(archivo_salida):
        Exporta los resultados a un archivo JSON.

    mostrar_pantalla():
        Muestra los resultados en la terminal usando una tabla formateada con la biblioteca Rich.
    """

    def __init__(self, resultados):
        """
        Inicializa la clase ResultsParser con una lista de resultados.

        Parámetros:
        -----------
        resultados : list
            Lista de diccionarios con claves "title", "description", y "link".
        """
        self.results = resultados

    def export_html(self, archivo_salida):
        """
        Exporta los resultados a un archivo HTML. Usa una plantilla de HTML y reemplaza
        el contenido dinámico con los resultados.

        Parámetros:
        -----------
        archivo_salida : str
            Ruta del archivo de salida donde se guardará el HTML generado.
        """
        with open("html_template.html", 'r', encoding='utf-8') as html:
            plantilla = html.read()

        elementos_html = ""

        for indice, resultado in enumerate(self.results, start=1):
            elemento = f'<div class = "resultados">' \
                       f'<div class = "indice">Resultado{indice}</div>' \
                       f'<h5>{resultado["title"]}</h5>' \
                       f'<p>{resultado["description"]}</p>' \
                       f'<a href="{resultado["link"]}" target="_blank">{resultado["link"]}</a>' \
                       f'</div>'
            elementos_html += elemento
        informe_htmol = plantilla.replace('{{resultados}}', elementos_html)
        with open(archivo_salida, 'w', encoding='utf-8') as archivo:
            archivo.write(informe_htmol)
        print(f'Resultados exportidos a HTML. Fichero creado: {archivo_salida}')

    def exportar_json(self, archivo_salida):
        """
        Exporta los resultados a un archivo JSON.

        Parámetros:
        -----------
        archivo_salida : str
            Ruta del archivo de salida donde se guardará el archivo JSON.
        """
        with open(archivo_salida, 'w', encoding='utf-8') as archivo:
            json.dump(self.results, archivo, ensure_ascii=False, indent=4)
        print(f'Resultados exportidos a JSON. Fichero creado: {archivo_salida}')

    def mostrar_pantalla(self):
        """
        Muestra los resultados en la consola en formato de tabla, utilizando la biblioteca Rich.

        La tabla contiene columnas para el índice, título, descripción y enlace de cada resultado.
        """
        console = Console()
        table = Table(show_header=True, header_style="bold_magenta")
        table.add_column("#", style="dim")
        table.add_column("Titulo", width=50)
        table.add_column("Descripcion")
        table.add_column("Enlace")

        for indice, resultado in enumerate(self.results, start=1):
            table.add_row(str(indice), resultado["title"], resultado["description"], resultado["link"])
            table.add_row("", "", "", "")

        console.print(table)







