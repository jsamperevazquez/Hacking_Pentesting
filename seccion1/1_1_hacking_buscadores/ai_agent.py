from gpt4all import GPT4All
from openai import OpenAI


def _build_prompt(descript):
    """
    Construye el prompt que será enviado al modelo de IA para generar un Google Dork
    basado en la descripción proporcionada por el usuario.

    Parámetros:
    -----------
    descript : str
        Descripción proporcionada por el usuario que explica el tipo de búsqueda deseada.

    Devuelve:
    --------
    str:
        Un string que representa el prompt formateado para generar un Google Dork.
    """
    return f"""
            Genera un Google Dork específico basado en la descripción del usuario.
            Un Google Dork utiliza operadores avanzados en motores de búsqueda para encontrar información específica
            que es difícil de encontrar mediante una búsqueda normal. Tu tarea es convertir la descripción del
            usuario en un Google Dork preciso. A continuación, se presentan algunos ejemplos de cómo deberías formular
            los Google Dorks basándote en diferentes descripciones:

            Descripción: Documentos PDF relacionados con la seguridad informática publicados en el último año.
            Google Dork: filetype:pdf "seguridad informática" after:2023-01-01

            Descripción: Presentaciones de Powerpoint sobre cambio climático disponibles en sitios .edu.
            Google Dork: site:.edu filetype:ppt "cambio climático"

            Descripción: Listas de correos electrónicos en archivos de texto dentro de dominios gubernamentales.
            Google Dork: site:.gov filetype:txt "email" | "correo electrónico"

            Ahora, basado en la siguiente descripción proporcionada por el usuario, genera el Google Dork correspondiente:

            Descripción: {descript}           
            """


class GPT4ALLGenerator:
    """
    Clase que utiliza el modelo GPT4All para generar Google Dorks basados en descripciones del usuario.

    Atributos:
    ----------
    model : GPT4All
        El modelo GPT4All cargado, utilizado para generar las respuestas.

    Métodos:
    --------
    generate(prompt: str) -> str:
        Genera una respuesta utilizando el modelo GPT4All basado en el prompt proporcionado.
    """

    def __init__(self, model_name="orca-mini-3b-gguf2-q4_0.gguf"):
        """
        Inicializa la clase GPT4ALLGenerator con el modelo especificado.

        Parámetros:
        -----------
        model_name : str, opcional
            Nombre del modelo GPT4All a utilizar (por defecto es "orca-mini-3b-gguf2-q4_0.gguf").
        """
        self.model = GPT4All(model_name)

    def generate(self, prompt):
        """
        Genera una respuesta a partir del prompt usando el modelo GPT4All.

        Parámetros:
        -----------
        prompt : str
            El prompt que se utilizará para generar una respuesta.

        Devuelve:
        --------
        str:
            La respuesta generada por el modelo.
        """
        return self.model.generate(prompt)


class OPENAIGenerator:
    """
    Clase que utiliza el modelo GPT de OpenAI para generar Google Dorks basados en descripciones del usuario.

    Atributos:
    ----------
    model_name : str
        Nombre del modelo GPT de OpenAI a utilizar.

    client : OpenAI
        Cliente de la API de OpenAI utilizado para interactuar con los modelos.

    Métodos:
    --------
    generate(prompt: str) -> str:
        Genera una respuesta utilizando el modelo de OpenAI basado en el prompt proporcionado.
    """

    def __init__(self, model_name="gpt4"):
        """
        Inicializa la clase OPENAIGenerator con el modelo GPT-4 de OpenAI.

        Parámetros:
        -----------
        model_name : str, opcional
            Nombre del modelo de OpenAI a utilizar (por defecto es "gpt4").
        """
        self.model_name = model_name
        self.client = OpenAI()

    def generate(self, prompt):
        """
        Genera una respuesta a partir del prompt usando el modelo GPT de OpenAI.

        Parámetros:
        -----------
        prompt : str
            El prompt que se utilizará para generar una respuesta.

        Devuelve:
        --------
        str:
            La respuesta generada por el modelo de OpenAI.
        """
        chat_completion = self.client.chat.completions.create(
            messages=[
                {
                    "role": "user",
                    "content": prompt,
                }
            ],
            model="gpt-4",
        )
        return chat_completion.choices[0].message.content


class IAAgent:
    """
    Agente que utiliza un generador de IA para crear Google Dorks basados en descripciones del usuario.

    Atributos:
    ----------
    generator : object
        El generador de IA utilizado (puede ser GPT4All o OpenAI).

    Métodos:
    --------
    generate_gdork(descript: str) -> str:
        Genera un Google Dork basado en la descripción proporcionada por el usuario.
    """

    def __init__(self, generator):
        """
        Inicializa la clase IAAgent con el generador de IA especificado.

        Parámetros:
        -----------
        generator : object
            El generador de IA que se utilizará para generar los Google Dorks (puede ser GPT4All o OpenAI).
        """
        self.generator = generator

    def generate_gdork(self, descript):
        """
        Genera un Google Dork basado en la descripción proporcionada por el usuario.

        Parámetros:
        -----------
        descript : str
            Descripción del tipo de búsqueda que el usuario desea realizar.

        Devuelve:
        --------
        str:
            El Google Dork generado por el modelo de IA.
        """
        prompt = _build_prompt(descript)
        try:
            output = self.generator.generate(prompt)
            return output
        except Exception as e:
            print(f"Error al generar el google dork: {e}")
            return None



